#!/bin/bash
export POSIXLY_CORRECT=yes
export LC_ALL=C
#clear

########	HELP SECTION	########

help(){
	echo "Usage:	./corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]]"
	echo ""

	echo "Popis:"
	echo "	Skript filtruje záznamy osob s prokázanou nákazou koronavirem způsobujícím onemocnění COVID-19. Pokud je skriptu zadán také příkaz, nad filtrovanými záznamy daný příkaz provede."
	echo "	Pokud skript nedostane ani filtr ani příkaz, opisuje záznamy na standardní výstup."
	echo "	Skript umí zpracovat i záznamy komprimované pomocí nástrojů gzip a bzip2 (v případě, že název souboru končí .gz resp. .bz2)."
	echo "	V případě, že skript na příkazové řádce nedostane soubory se záznamy (LOG, LOG2, …), očekává záznamy na standardním vstupu."
	echo "	Pokud má skript vypsat seznam, každá položka je vypsána na jeden řádek a pouze jednou. Není-li uvedeno jinak, je pořadí řádků dáno abecedně. Položky se nesmí opakovat."
	echo "	Grafy jsou vykresleny pomocí ASCII a jsou otočené doprava. Hodnota řádku je vyobrazena posloupností znaku mřížky #."
	echo ""

	echo "Návratová hodnota:"
	echo "	Skript vrací úspěch v případě úspěšné operace. Interní chyba skriptu nebo chybné argumenty budou doprovázeny chybovým hlášením na stderr a neúspěšným návratovým kódem."
	echo ""

	echo "Seznam dostupných přepínačů:"
	echo ""
	echo "	-a DATETIME		Jsou uvažovány pouze záznamy po tomto datu (včetně tohoto data). DATETIME je formátu YYYY-MM-DD"
	echo "	-b DATETIME		Jsou uvažovány pouze záznamy PŘED tímto datem (včetně tohoto data)"
	echo "	-g GENDER		Jsou uvažovány pouze záznamy nakažených osob daného pohlaví. GENDER může být M (muži) nebo Z (ženy)"
	echo "	-h			Vypíše nápovědu s krátkým popisem každého příkazu a přepínače"
	echo "	-s [WIDTH]		U příkazů gender, age, daily, monthly, yearly, countries, districts a regions vypisuje data ne číselně, ale graficky v podobě histogramů."
	echo "				Nepovinný parametr WIDTH nastavuje šířku histogramů, tedy délku nejdelšího řádku, na WIDTH. Tedy, WIDTH musí být kladné celé číslo."
	echo "				Pokud není parametr WIDTH uveden, řídí se šířky řádků požadavky uvedenými níže."
	echo "					-d DISTRICT_FILE — pro příkaz districts vypisuje místo LAU 1 kódu okresu jeho jméno. Mapování kódů na jména je v souboru DISTRICT_FILE"
	echo "					-r REGIONS_FILE — pro příkaz regions vypisuje místo NUTS 3 kódu kraje jeho jméno. Mapování kódů na jména je v souboru REGIONS_FILE"
	echo ""

	echo "Seznam dostupných příkazů:"
	echo ""
	echo "	infected		Spočítá počet nakažených"
	echo "	merge			Sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí (hlavička bude ve výstupu jen jednou)"
	echo "	gender			Vypíše počet nakažených pro jednotlivá pohlaví"
	echo "	age			Vypíše statistiku počtu nakažených osob dle věku"
	echo "	daily			Vypíše statistiku nakažených osob pro jednotlivé dny"
	echo "	monthly			Vypíše statistiku nakažených osob pro jednotlivé měsíce"
	echo "	yearly			Vypíše statistiku nakažených osob pro jednotlivé roky"
	echo "	countries		Vypíše statistiku nakažených osob pro jednotlivé země nákazy (bez ČR, tj. kódu cz)"
	echo "	districts		Vypíše statistiku nakažených osob pro jednotlivé okresy"
	echo "	regions			Vypíše statistiku nakažených osob pro jednotlivé kraje"
	echo ""
	echo ""

	echo "Error Codes"
	echo ""
	echo "	0			Program skončil bez chyby"
	echo "	1			Program se ukončil z důvodu výskytu chyby, výstup je doprovázen patřičným chybovým hlášením"
	echo ""
	exit 0
}




########	ERROR SECTION	########

errorDate(){
	echo "Invalid date on filter \"$1\"!" >&2
	exit 1
}
errorDateSpec(){
	echo "Wrong date format (YYYY-MM-DD) on filter \"$1\" / date not specified!" >&2
	exit 1
}
errorMultipleFilter(){
	echo "Multiple usage of same filter \"$1\"!" >&2
	exit 1
}
errorGender(){
	echo "Filter \"$1\" has to be M / Z!" >&2
	exit 1
}
errorMultipleCommand(){
	echo "You cannot enter more than 1 COMMAND!" >&2
	exit 1
}

errorFilterWithoutFile(){
	echo "File not specified!" >&2
	exit 1
}

errorFilter_s(){
	echo "Wrong position of filter \"-s\"! / No log provided!" >&2
	exit 1
}
errorZeroFilter(){
	echo "WIDTH of filter \"-s\" has to be greater than 0!" >&2
	exit 1
}

########	VARIABLES	########

afterTime="0000-01-01"
atCount=0

beforeTime="9999-12-31"
btCount=0

genderCount=0
gender="none"

termInput="cat -"

command="default"
cmdCount=0

newLine=$(printf "\n")

filters="0000"

head="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"

width="not_set"
sCount=0
hashtags="1"
divider=1

########	Validation	########
validateGender(){	
	if [ $genderCount -eq 1 ]; then
			errorMultipleFilter "$1"
	fi
	genderCount=$((genderCount+1))
	if [ "$2" = "M" ]; then
		gender="$2"
		#echo "Gender is: \"$gender\""
		return 0
	elif [ "$2" = "Z" ]; then
		gender="$2"
		#echo "Gender is: \"$gender\""
		return 0
	else
		errorGender "$1"
	fi	
}

validateCommand(){
	if [ $cmdCount -eq 1 ]; then
		errorMultipleCommand
	fi
	cmdCount=$((cmdCount+1))
}

validateWidth(){
	if [ $sCount -eq 1 ]; then
			errorMultipleFilter "$1"
	fi
	sCount=$((sCount+1))

	if expr "$2" : "[0-9]*">/dev/null; then
		if [ $2 -eq 0 ]; then
			errorZeroFilter
		fi
		width=$2
		return 0
	else
		width="not_set"
		return 1
	fi

}

validateDate(){
	if [ "$1" = "-a" ]; then
		if [ $atCount -eq 1 ]; then
				errorMultipleFilter "$1"
		fi
	elif [ "$1" = "-b" ]; then 
		if [ $btCount -eq 1 ]; then
				errorMultipleFilter "$1"
		fi
	fi
	if expr "$2" : "^[0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]">/dev/null; then
			# Year Validation
			$(echo $2 | awk -F \- '$1 == 0 {exit 1}') # This depends if gregorian calendar 1582 is counted
			if [ $? -eq 0 ]; then
				# Month Validation
				$(echo $2 | awk -F \- '$2 > 12 || $2 <= 0{exit 1}')
				if [ $? -eq 0 ]; then
					# Day Validation
					$(echo $2 | awk -F \- '{
						if($2 == 1 && ($3 > 31 || $3 <= 0)){
							exit 1
						}
						else if ($2 == 2 && ($1 % 4) != 0 && ($3 > 28 || $3 <= 0)){
							exit 1
						} 
						else if ($2 == 2 && ($1 % 4) == 0 && ($3 > 29 || $3 <= 0)){
							exit 1
						}
						else if($2 == 3 && ($3 > 31 || $3 <= 0)){
							exit 1
						}
						else if($2 == 4 && ($3 > 30 || $3 <= 0)){
							exit 1
						}
						else if($2 == 5 && ($3 > 31 || $3 <= 0)){
							exit 1
						}
						else if($2 == 6 && ($3 > 30 || $3 <= 0)){
							exit 1
						}
						else if($2 == 7 && ($3 > 31 || $3 <= 0)){
							exit 1
						}
						else if($2 == 8 && ($3 > 31 || $3 <= 0)){
							exit 1
						}
						else if($2 == 9 && ($3 > 30 || $3 <= 0)){
							exit 1
						}
						else if($2 == 10 && ($3 > 31 || $3 <= 0)){
							exit 1
						}
						else if($2 == 11 && ($3 > 30 || $3 <= 0)){
							exit 1
						}
						else if($2 == 12 && ($3 > 31 || $3 <= 0)){
							exit 1
						}
						
						}')
					if [ $? -eq 0 ]; then
						if [ "$1" = "-a" ]; then
							atCount=$((atCount+1))
							return 0
						else
							btCount=$((btCount+1))	
							return 0
						fi				
					else	
						errorDate "$1"
					fi
				else
					errorDate "$1"
				fi
			else
				errorDate "$1"
			fi
		else
			errorDateSpec "$1"
		fi
}

pickCommand(){
	case "$1" in
		"infected") if [ $genderCount -eq 1 ]; then
						filtered=$(echo "$logs" | awk -F ',' -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge {count[0]++} END{print count[0]}' )
						echo "$filtered"

					else
						filtered=$(echo "$logs" | awk -F ',' -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {count[0]++} END{print count[0]}' )
						echo "$filtered"
						exit 0
					fi;;
		"merge") 
				if [ $genderCount -eq 1 ]; then
					filtered=$(echo "$logs" | awk -F ',' -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge {print $0}' )
					echo "$head"
					echo "$filtered"

				else
					filtered=$(echo "$logs" | awk -F ',' -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $0}' )
					echo "$head"
					echo "$filtered"
					exit 0
				fi;;
		"gender")
				
				if [ $genderCount -eq 1 ]; then
					filtered=$(echo "$logs" | awk -F ',' -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge {count[0]++} END{print count[0]}' )
					if [ "$gender" = "M" ]; then
						echo "M: $filtered"
						echo "Z: 0"
					else
						echo "M: 0"
						echo "Z: $filtered"	
					fi

				else
					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" 'NR>1 && $2 >= Af && $2 <= Bf{print $4}' | sort | uniq -c | awk -v count=0 '{if($2 == "M" || $2 == "Z"){print $2 ": "$1}if($2 == ""){print "None: "$1}}' | awk -F \: '{if($1 == "None"){tmp=$0;next}else{print $0}} END{print tmp}')
					echo "$filtered"

					
					exit 0
				fi;;
		"age")
				if [ $genderCount -eq 1 ]; then
					#0-5
					
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= 0 && $3 <= 5 && $4 == Ge && ($2 >= Af && $2 <= Bf) ' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo "0-5   :" $filtered
						else
							echo "0-5	: 0"
						fi
					#6-15
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= 6 && $3 <= 15 && $4 == Ge && ($2 >= Af && $2 <= Bf) ' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo "6-15  :" $filtered
						else
							echo "6-15  : 0"
						fi
					#16-95
					for i in 16 26 36 46 56 66 76 86; do
						filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v startIndex="$i" -v endIndex="$((i+9))" -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= startIndex && $3 <= endIndex && $4 == Ge && ($2 >= Af && $2 <= Bf)' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )
						
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo "$i-$((i+9)) :" $filtered
						else
							echo "$i-$((i+9))  : 0"
						fi
					done
					#96-105
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= 96 && $3 <= 105 && $4 == Ge && ($2 >= Af && $2 <= Bf)' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )	
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo "96-105:" $filtered
						else
							echo "96-105: 0"
						fi
					#106+
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= 106 && $3 <= 10000000 && $4 == Ge && ($2 >= Af && $2 <= Bf)' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )	
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo ">105  :" $filtered
						else
							echo ">105	: 0"
						fi
					
					#None
					echo "None	:" "0"	
					exit 0
				else
					#0-5
					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= 0 && $3 <= 5 && $2 >= Af && $2 <= Bf' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo "0-5   :" $filtered
						else
							echo "0-5   : 0"
						fi
					#6-15
					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= 6 && $3 <= 15 && ($2 >= Af && $2 <= Bf) ' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo "6-15  :" $filtered
						else
							echo "6-15  : 0"
						fi
					#6-95
					for i in 16 26 36 46 56 66 76 86; do
						filtered=$(echo "$logs" | awk -F, -v startIndex="$i" -v endIndex="$((i+9))" -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= startIndex && $3 <= endIndex && ($2 >= Af && $2 <= Bf)' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo "$i-$((i+9)) :" $filtered
						else
							echo "$i-$((i+9)) : 0"
						fi
					done
					#96-105
					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= 96 && $3 <= 105 && ($2 >= Af && $2 <= Bf)' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )	
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo "96-105:" $filtered
						else
							echo "96-105: 0"
						fi
					#106+
					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$3 >= 106 && $3 <= 10000000 && ($2 >= Af && $2 <= Bf)' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )	
						if expr "$filtered" : "[1-9]*">/dev/null; then
							echo ">105  :" $filtered
						else
							echo ">105  : 0"
						fi
					
					#None
					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '($3 < 0 || $3 > 10000000) && $2 >= Af && $2 <= Bf' |  cut -d, -f3 | sort | uniq -c | awk '{countAge[0]+=$1} END {print countAge[0]}' )	
					if expr "$filtered" : "[1-9]*[0-9]*">/dev/null; then
						echo "None  :" $filtered				
					fi
					exit 0
				fi;;

		"countries")
				if [ $genderCount -eq 1 ]; then
					
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf && $4 == Ge{print $8}' | sort | uniq -c | awk 'NR>1{if($2 == "CZ"){next}else{print $2": "$1}}')
					echo "$filtered"
					exit 0
				else
					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $8}' | sort | uniq -c | awk 'NR>1{if($2 == "CZ"){next}else{print $2": "$1}}')
					echo "$filtered"
					exit 0
				fi;;

		"districts")
				if [ $genderCount -eq 1 ]; then
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $6}' | sort | uniq -c | awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}' | awk -F \: '{divider=$2/1000;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}' | awk -F \: '{if($1 == "None"){tmp = $0;next}else{print $0}}END{print tmp}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $6}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $6}' | sort | uniq -c | awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}' | awk -F \: '{if($1 == "None"){tmp = $0;next}else{print $0}}END{print tmp}')
							echo "$filtered"	 
						fi
						exit 0
					fi
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf && $4 == Ge{print $6}' | sort | uniq -c | awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}'| awk -F \: '{if($1 == "None"){tmp = $0;next}else{print $0}}END{print tmp}')
					echo "$filtered"
					exit 0
				else
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $6}' | sort | uniq -c | awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}' | awk -F \: '{divider=$2/1000;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}' | awk -F \: '{if($1 == "None"){tmp = $0;next}else{print $0}}END{print tmp}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $6}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $6}' | sort | uniq -c | awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}' | awk -F \: '{if($1 == "None"){tmp = $0;next}else{print $0}}END{print tmp}')
							echo "$filtered"
						fi
						exit 0
					fi

					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $6}' | sort | uniq -c | awk -v count=0 '{if($2 ~ /CZ*/){print $2 ": "$1} if($2 == ""){print "None: "$1}}' | awk -F \: '{if($1 == "None"){tmp=$0;next}else{print $0}} END{print tmp}')
					echo "$filtered"
					exit 0
				fi;;

		"regions")
				if [ $genderCount -eq 1 ]; then
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $5}' | sort | uniq -c | awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}' | awk -F \: '{divider=$2/1000;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}' | awk -F \: '{if($1 == "None"){tmp = $0;next}else{print $0}}END{print tmp}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $5}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $5}' | sort | uniq -c |  awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}' | awk -F \: 'BEGIN{count=0}{if($1 == "None"){tmp = $0;count+=1;next}else{print $0}}END{if(count > 0){print tmp}}')
							echo "$filtered"	 
						fi
						exit 0
					fi
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf && $4 == Ge{print $5}' | sort | uniq -c |  awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}'| awk -F \: '{if($1 == "None"){tmp = $0;next}else{print $0}}END{print tmp}')
					echo "$filtered"
					exit 0
				else
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $5}' | sort | uniq -c | awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}' | awk -F \: '{divider=$2/10000;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}' | awk -F \: '{if($1 == "None"){tmp = $0;next}else{print $0}}END{print tmp}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $5}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '{if($2 >= Af && $2 <= Bf ){print $5}}' | sort | uniq -c | awk '{if($2 == ""){print "None: "$1}else{print $2 ": "$1}}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}' | awk -F \: 'BEGIN{count=0}{if($1 == "None"){tmp = $0;count+=1;next}else{print $0}}END{if(count > 0){print tmp}}')
							echo "$filtered"
						fi
						exit 0
					fi

					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $5}' | sort | uniq -c | awk -v count=0 '{if($2 ~ /CZ*/){print $2 ": "$1} if($2 == ""){print "None: "$1}}' | awk -F \: '{if($1 == "None"){tmp=$0;next}else{print $0}} END{print tmp}')
					echo "$filtered"
					exit 0
				fi;;

		"yearly")
				if [ $genderCount -eq 1 ]; then
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | awk -F - '{print $1}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: '{divider=$2/100000;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | awk -F - '{print $1}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | awk -F - '{print $1}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}')
							echo "$filtered"	 
						fi
						exit 0
					fi
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | awk -F - '{print $1}' | sort | uniq -c | awk '{print $2 ": "$1}')
					echo "$filtered"
					exit 0
				else
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $2}' | awk -F - '{print $1}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: '{divider=$2/100000;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $2}' | awk -F - '{print $1}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $2}' | awk -F - '{print $1}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}')
							echo "$filtered"
						fi
						exit 0
					fi
					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '{if(NR>1 && $2 >= Af && $2 <= Bf){print $2}else if($2 == ""){print "None"}}' | awk -F - '{print $1}' | sort | uniq -c | awk '{print $2 ": "$1}')
					echo "$filtered"
					exit 0
				fi;;
		"monthly")
				if [ $genderCount -eq 1 ]; then
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | awk -F - '{print $1"-"$2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: '{divider=$2/10000;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | awk -F - '{print $1"-"$2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | awk -F - '{print $1"-"$2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}')
							echo "$filtered"	 
						fi
						exit 0
					fi
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '{if($2 >= Af && $2 <= Bf && $4 == Ge){print $2}}' | awk -F - '{print $1"-"$2}' | sort | uniq -c | awk '{print $2 ": "$1}')
					echo "$filtered"
					exit 0
				else
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $2}' | awk -F - '{print $1"-"$2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: '{divider=$2/10000;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf {print $2}' | awk -F - '{print $1"-"$2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf {print $2}' | awk -F - '{print $1"-"$2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}')
							echo "$filtered"
						fi
						exit 0
					fi

					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '{if(NR>1 && $2 >= Af && $2 <= Bf){print $2}else if($2 == ""){print "None"}}' | awk -F - '{print $1"-"$2}' | sort | uniq -c | awk '{print $2 ": "$1}')
					echo "$filtered"
					exit 0
				fi;;
		"daily")
				if [ $genderCount -eq 1 ]; then
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: '{divider=$2/500;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf && $4 == Ge{print $2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}')
							echo "$filtered"	
						fi
						exit 0
					fi
					# Filter -s is not present
					filtered=$(echo "$logs" | awk -F, -v Ge="$gender" -v Af="$afterTime" -v Bf="$beforeTime" '{if($2 >= Af && $2 <= Bf && $4 == Ge){print $2}}' | sort | uniq -c | awk '{print $2 ": "$1}')
					echo "$filtered"
					exit 0
				else
					if [ $sCount -eq 1 ]; then	# Filter -s is present
						if [ "$width" = "not_set" ]; then	# Optional parameter is present
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '$2 >= Af && $2 <= Bf {print $2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: '{divider=$2/500;if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} hashtags=sprintf("%*s", divider, ""); gsub(" ", "#",hashtags); print hashtags;}')
							echo "$filtered"
						else
							divider=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf {print $2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v width="$width" -v divider="$divider" 'BEGIN{max=0;}{if(max < $2){max=$2; divider=$2/width}} END{print divider}')
							filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" -v Ge="$gender" '$2 >= Af && $2 <= Bf {print $2}' | sort | uniq -c | awk '{print $2 ": "$1}' | awk -F \: -v divider="$divider" '{if(divider > 1.000000){printf "%s: ", $1} else {printf "%s:", $1} divider2=$2/divider; hashtags=sprintf("%*s", divider2, ""); gsub(" ", "#",hashtags); print hashtags}')
							echo "$filtered"
						fi
						exit 0
					fi

					filtered=$(echo "$logs" | awk -F, -v Af="$afterTime" -v Bf="$beforeTime" '{if(NR>1 && $2 >= Af && $2 <= Bf ){print $2}else if($2 == ""){print "None"}}' | sort | uniq -c | awk '{print $2 ": "$1}')
					echo "$filtered"
					exit 0
				fi;;
	esac

}

########	Control Code	########


while [ $# -gt 0 ]; do
	option="$1"

      case "$option" in
    "-h")	
		help 
		shift;;
	"-a")	
		afterTime="$2"
		validateDate "$1" "$2"
		shift
		shift;;
		
	"-b")	
		beforeTime="$2"
		validateDate "$1" "$2"
		shift
		shift;;

	"-g")
		validateGender "$1" "$2"
		shift
		shift;;

	"-s")
		width="$2"
		validateWidth "$1" "$2"
		if [ $? -eq 0 ]; then
			shift;
			shift;
			if [ $# -eq 0 ]; then
				errorFilter_s
			fi
		else
			shift;
			if [ $# -eq 0 ]; then
				errorFilter_s
			fi
		fi;;

	"infected" | "merge" | "gender" | "age" | "daily" | "monthly" | "yearly" | "countries" | "districts" | "regions")
		command="$1"
		validateCommand
		shift;;

   	*)

		if expr "$1" : "^\-[aA0-zZ9]">/dev/null; then #If $1 is a non-existing filter
           if [ $? -eq 0 ]; then
                echo "Invalid filter \"$1\"">&2
				exit 1
        	fi

        elif expr "$1" : "^[aA-zZ]*">/dev/null; then	#If $1 is expected to be a file
           	if [ $? -eq 0 ]; then
			   	if expr "$1" : ".*\.gz">/dev/null; then
					logs+=$(gzip -d -c "$1";printf "\r"$newLine)
					#echo "$logs"
				elif expr "$1" : ".*\.bz2">/dev/null; then
					logs+=$(bzcat -d -c "$1";printf "\r"$newLine)
					#echo "$logs"
				else
					logs+=$(cat "$1";printf "\r"$newLine)
			   fi
				
				shift
			
				if [ $# -eq 0 ]; then
				
				logs=$(echo "$logs" | head -n -1 | awk -F , '{if($3 ~ /[+]?[0-9]*[.]+[0-9]+/){print "Invalid age: "$0>"/dev/stderr"}else{print $0}}')
					if [ "$command" = "default" ]; then
						command="merge"			
						pickCommand "$command"
					else
						pickCommand "$command"	
						

					fi
				fi
			fi
		else
			logs=""
			echo "$head"
			exit 0
        fi;;
      esac
done

# If log provided by cat log | ./corona
if [ "$logs" = "" ]; then
	logs="$logs$(cat - )$newLine"
	if [ "$logs" = "" ]; then
		logs=""
		echo "$head"
		exit 0

	fi
	if [ "$command" = "default" ]; then
		command="merge"			
		pickCommand "$command"
	else
		pickCommand "$command"	
	fi
fi



